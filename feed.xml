<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://peter.palaga.org/feed.xml" rel="self" type="application/atom+xml" /><link href="https://peter.palaga.org/" rel="alternate" type="text/html" /><updated>2023-05-25T14:07:07+00:00</updated><id>https://peter.palaga.org/feed.xml</id><title type="html">Peter Palaga</title><subtitle>A software engineer at Red Hat Integration, working mostly on Apache Camel Quarkus, coauthor of mvnd, srcdeps and ec4j.</subtitle><entry><title type="html">mvnd - the Maven Daemon</title><link href="https://peter.palaga.org/2023/05/21/mvnd-maven-daemon.html" rel="alternate" type="text/html" title="mvnd - the Maven Daemon" /><published>2023-05-21T00:00:00+00:00</published><updated>2023-05-21T00:00:00+00:00</updated><id>https://peter.palaga.org/2023/05/21/mvnd-maven-daemon</id><content type="html" xml:base="https://peter.palaga.org/2023/05/21/mvnd-maven-daemon.html">&lt;h1&gt;&lt;code&gt;mvnd&lt;/code&gt; - the Maven Daemon&lt;/h1&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maven is a well known build tool for Java and related languages targeting Java Virtual Machine (JVM).
Its declarative approach to defining builds belongs to its main strengths.
Even basic knowledge of Maven principles allows understanding basically any third party project.
It is well established, rather stable and has a rich ecosystem of plugins.
It is also very important for defining a &lt;em&gt;de facto&lt;/em&gt; standard for publishing and consuming libraries in the JVM world.
Maven Central and its artifact metadata formats are used and respected throughout the JVM space.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maven has some well known downsides:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pom.xml&lt;/code&gt; files are often criticized as too verbose.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maven performance is not on par with Gradle, especialy in incremental and iterative scenarios.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maven parallel builds are hard to use, because the console output is a mishmash of randomly mixed lines
from different module builds.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s have a look how Maven Daemon addresses the latter two points.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jvm_performance_basics&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jvm_performance_basics&quot;&gt;&lt;/a&gt;JVM performance basics&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most of us, Java developer know that Java is fast, but it needs some warm up time to unveil its full potential.
This is caused, on one hand, by the fact that booting a JVM application costs some time
and on the other hand by the way how Just in Time (JIT) compilation works in JVM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;maven_boot_costs&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#maven_boot_costs&quot;&gt;&lt;/a&gt;Maven boot costs&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s have a look at the boot costs first.
In case of Maven, we can quantify them through a simple experiment.
In Maven source code, we find the location where Maven starts its own build duration measurement.
That&amp;#8217;s the baseline for the well known &lt;code&gt;BUILD SUCCESS/Total time:&lt;/code&gt; message at the end of every Maven build.
We can say that this is the point in time where Maven starts doing something useful.
Everything that happens before can be considered a boot up cost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we place &lt;code&gt;System.out.println(&quot;End of Maven init: &quot; + System.currentTimeMillis())&lt;/code&gt; statement around there and
invoke something as simple as &lt;code&gt;mvn install&lt;/code&gt; prepending it with a shell time output in milliseconds, like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ echo $(($(date +%s%N)/1000000)) &amp;amp;&amp;amp; mvn install&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It outputs two numbers.
On my Lenovo P1 Gen 3 laptop those are 1634117024986 and 1634117025765.
Subtracting them gives the result of 779 milliseconds.
That&amp;#8217;s the time needed to boot the JVM and load all classes necessary for Maven to start doing something useful.
Three quarters of a second.
That&amp;#8217;s quite a lot, isn&amp;#8217;t it?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;just_in_time_jit_compilation_costs&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#just_in_time_jit_compilation_costs&quot;&gt;&lt;/a&gt;Just in Time (JIT) compilation costs&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java source files are compiled to bytecode at build time.
However that&amp;#8217;s not the kind of code runnable on any physical processor.
The bytecode is yet to be translated to instructions comprehensible to some given processor.
This initially happens &quot;on the fly&quot;, as the JVM is executing the methods of the application.
Every method is first executed in this basic &lt;em&gt;interpreter&lt;/em&gt; mode.
Only if some method is executed often enough (becomes &lt;em&gt;warm&lt;/em&gt;), the JVM decides to compile it using the &lt;em&gt;quick&lt;/em&gt; compiler.
Once the given method gets &lt;em&gt;hot&lt;/em&gt;, i.e. it is executed very often, the JVM compiles it using the &lt;em&gt;optimizing&lt;/em&gt; compiler.
Apparently, the JIT compilation requires some computing resources itself.
Hence to make the application faster, it slows it down first by spending CPU time on the compilation and optimizations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What is the impact of this on Java build tools?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is quite substantial, because builds are rather short living processes.
The boot costs of 0.78 seconds may well translate to a substantial portion of the overall build duration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As for the effect of JIT compilation, the code of a short living build is either running in the slow interpreter mode
or if JIT compilation kicks in at all, its overhead can hardly pay back before the process exits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having a background process (daemon) that survives the individual builds is a very straightforward solution to both of these problems.
This background process then hosts the actual build and the command line utility is just a thin client for it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While Gradle has it since long it is rather new in Maven.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s try it out.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maven Daemon needs to be installed separately from Maven
and it is good to know that the installations of Maven Daemon and Maven do not interact in any way.
You can have both or just one of them on your machine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maven Daemon can be installed in several ways.
Using some of the following package managers is perhaps easier than downloading a ZIP file from
&lt;a href=&quot;https://downloads.apache.org/maven/mvnd&quot;&gt;https://downloads.apache.org/maven/mvnd&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://sdkman.io/sdks#mvnd&quot;&gt;SDKMAN!&lt;/a&gt; &lt;code&gt;sdk install mvnd&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; &lt;code&gt;brew install mvndaemon/homebrew-mvnd/mvnd&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.macports.org/&quot;&gt;MacPorts&lt;/a&gt; &lt;code&gt;port install mvnd&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://community.chocolatey.org/packages/mvndaemon&quot;&gt;Chocolatey&lt;/a&gt; &lt;code&gt;choco install mvndaemon&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://scoop.sh/&quot;&gt;Scoop&lt;/a&gt; &lt;code&gt;scoop install mvndaemon&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/joschi/asdf-mvnd#install&quot;&gt;asdf&lt;/a&gt; &lt;code&gt;asdf plugin-add mvnd &amp;amp;&amp;amp; asdf install mvnd latest&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;parts_of_maven_daemon&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#parts_of_maven_daemon&quot;&gt;&lt;/a&gt;Parts of Maven Daemon&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As sketched above, you need two things to leverage the concept of daemon: the command line client and the background process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mvnd_the_client&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mvnd_the_client&quot;&gt;&lt;/a&gt;&lt;code&gt;mvnd&lt;/code&gt; - the client&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In case of Maven, the client is a brand new program called &lt;code&gt;mvnd&lt;/code&gt; (or &lt;code&gt;mvnd.exe&lt;/code&gt; on Windows) that has little in common
with the traditional &lt;code&gt;mvn&lt;/code&gt; script.
Although it is written in Java, it is compiled to native executable using &lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM&lt;/a&gt;.
To be precise, this is the case only for platforms &lt;a href=&quot;https://www.graalvm.org/latest/docs/introduction/#features-support&quot;&gt;supported by GraalVM&lt;/a&gt;.
There is a shell script (&lt;code&gt;mvnd.sh&lt;/code&gt;) wrapping &lt;code&gt;mvnd-client.jar&lt;/code&gt; for the platforms unsupported by GraalVM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Why did we bother to port the client to GraalVM?
Except that it was fun, it has also brought some performance benefits.
GraalVM native executables are known for extremely fast boot up times and low memory footprint.
That&amp;#8217;s exactly what we needed.
Besides, by having a single client executable, we eliminated another slowing down process in the execution chain:
the shell script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So we have the &lt;code&gt;mvnd&lt;/code&gt; command line client that starts quickly.
What does it actually do?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, it looks whether some Daemon process is running and whether it is free for accepting build requests.
It does so by reading the Daemon registry stored in &lt;code&gt;~/.m2/mvnd/registry/&amp;lt;version&amp;gt;/registry.bin&lt;/code&gt;.
If there is no free Daemon, a new one is launched by the client.
Then the client connects to the Daemon through a network socket
and passes the command line parameters along with the environment of the current shell to the Daemon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Daemon accepts the request and starts executing it.
As the build proceeds, it sends notifications about the progress back to the client.
The client visualizes the state of the build in its text-based user interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2023/2023-05-21-mvnd-maven-daemon/ui.png&quot; alt=&quot;mvnd user interface&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;daemon&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#daemon&quot;&gt;&lt;/a&gt;Daemon&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Daemon process is a traditional JVM.
It embeds a specific Maven version.
The Maven version cannot be changed in any other way than by switching to another &lt;code&gt;mvnd&lt;/code&gt; version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Daemon reads &lt;code&gt;pom.xml&lt;/code&gt; files, loads plugins, downloads dependencies and all the other things that Maven usually does.
The main difference against stock Maven is that the Daemon does not exit upon build termination.
It stays alive listening on its socket and waiting for new requests from clients.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another difference against standard Maven is that Maven Daemon keeps a cache of classloaders
holding references to Maven plugin classes.
Hence if you keep building the same project with the same plugins during the day,
chances are high that you&amp;#8217;ll run the optimized code produced by the second level JIT compiler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, the Daemon terminates at some point.
The exact point in time depends on whether the given Daemon is the only one running.
In such a case, it exist after 3 hours of being idle.
This value is configurable - see the Configuration section below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If there are other Daemons running that were idle for longer time than the current Daemon,
then the current Daemon exists much faster - the default is 10 seconds and it is also configurable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The state of the running Daemons can be inspected using &lt;code&gt;mvnd --status&lt;/code&gt; command.
Here is an example output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ mvnd --status
  ID  PID                Address  Status  RSS             Last activity  Java home
5a12  3434  inet:/127.0.0.1:46675  Idle   721m  2023-05-21T20:12:16.905  ~/java/17.0.5-tem
56fd  3181  inet:/127.0.0.1:34947  Busy   7g    2023-05-21T20:11:57.953  ~/java/17.0.5-tem&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the RSS column shows the amount of memory occupied by the given Daemon process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All running Daemons can be stopped by invoking&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ mvnd --stop&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;parallel_by_default&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#parallel_by_default&quot;&gt;&lt;/a&gt;Parallel by default&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unlike standard Maven, &lt;code&gt;mvnd&lt;/code&gt; builds multimodule projects in parallel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The default number of build threads is given by the expression &lt;code&gt;Runtime.getRuntime().availableProcessors() - 1&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another condition is that the dependency relationships between the modules in the current source tree must actually allow a parallel build.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, if there are three modules &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; to be built
and the dependencies look like the following&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;    A
   / \
  B   C    (Lower depends on upper)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;then the module &lt;code&gt;A&lt;/code&gt; is built first.
After that, the modules &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; can be built in parallel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This kind of parallel execution brings substantial speedups in &quot;wide&quot; module graphs
where there are many siblings having a few common dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;smart_builder&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#smart_builder&quot;&gt;&lt;/a&gt;Smart builder&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maven has pluggable builders since version 3.2.1.
Those are strategies for scheduling and building modules.
Standard Maven offers two implementations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;singlethreaded&lt;/code&gt; (default)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;multithreaded&lt;/code&gt; - used with &lt;code&gt;-T/--threads&lt;/code&gt; command line option&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maven Daemon uses a third builder called &lt;a href=&quot;https://github.com/takari/takari-smart-builder&quot;&gt;Takari Smart builder&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Its authors characterize it as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The primary difference between the standard multi-threaded scheduler in Maven and the Smart builder is illustrated below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2023/2023-05-21-mvnd-maven-daemon/smart-builder-scheduler.png&quot; alt=&quot;Multi-threaded builder vs. Smart builder&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Multi-threaded builder vs. Smart builder&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The standard multi-threaded scheduler is using a rather naive and simple approach of using dependency-depth information in the project.
It builds everything at a given dependency-depth before continuing to the next level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Takari Smart Builder is using a more advanced approach of dependency-path information.
Projects are aggressively built along a dependency-path in topological order as upstream dependencies have been satisfied.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; From Takari Extensions for Apache Maven book http://takari.io/book/30-team-maven.html#takari-smart-builder
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;benchmarks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#benchmarks&quot;&gt;&lt;/a&gt;Benchmarks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/apache/camel-quarkus&quot;&gt;Camel Quarkus&lt;/a&gt; is a project where &lt;code&gt;mvnd&lt;/code&gt; speed gains are visible especially well:
it has 1336 Maven modules and its module graph is rather flat and wide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The test machine&amp;#8217;s CPU was AMD Ryzen 9 5950X with 16 cores and 32 virtual threads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are the build durations:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.6668%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Run no.&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Command&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Duration min:sec&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Speedup&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mvn clean install -Dquickly¹&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2:42&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;(baseline)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mvnd clean install -Dquickly&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0:56&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.9x&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mvnd clean install -Dquickly&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0:48&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3.4x&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mvnd clean install -Dquickly&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0:46&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3.5x&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;¹) &lt;code&gt;-Dquickly&lt;/code&gt; disables plugins non-essential for a build that previously passed all checks on the CI,
such as tests, source formatting, enforcer, etc.
You may want to check this &lt;a href=&quot;https://www.youtube.com/watch?v=Gwmmz_T6THA&quot;&gt;video&lt;/a&gt;
or &lt;a href=&quot;https://peter.palaga.org/presentations/221010-maven-my-life-is-short&quot;&gt;slides&lt;/a&gt;
for more details about what &lt;code&gt;-Dquickly&lt;/code&gt; does exactly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The effect of the parallel build can be seen very well when comparing the baseline &lt;code&gt;mvn&lt;/code&gt; run
with the first (on a cold JVM) &lt;code&gt;mvnd&lt;/code&gt; run.
The &lt;code&gt;mvnd&lt;/code&gt; build is 2.9 times faster thanks to the parallel build execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The effects of not restarting the warmed-up JVM can be observed when comparing the subsequent runs of &lt;code&gt;mvnd&lt;/code&gt;:
the second &lt;code&gt;mvnd&lt;/code&gt; run is 8 seconds faster than the first one and the third is even 2 more seconds faster.
This gradual acceleration is caused by the fact that with every iteration, less time is spent by JIT compilation
and the already compiled code runs faster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;single_module_builds&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#single_module_builds&quot;&gt;&lt;/a&gt;Single module builds&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have demonstrated the &lt;code&gt;mvnd&lt;/code&gt; speed gains for large multimodule builds.
But some folks do not build large multimodule projects at all.
There are also small and single module projects.
Or one can build a single module within a hierarchy.
Would there be any speed benefits there?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s have a look at an example.
&lt;a href=&quot;https://github.com/quarkusio/gizmo&quot;&gt;Gizmo&lt;/a&gt; is a single module project having 50 main Java classes and 40 test classes.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 16.6666%;&quot;&gt;
&lt;col style=&quot;width: 16.6668%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Run no.&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Command&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Duration sec&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Speedup&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mvn clean install -DskipTests&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.86&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;(baseline)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mvnd clean install -DskipTests&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3.24&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.88x&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mvnd clean install -DskipTests&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.61&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4.66x&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mvnd clean install -DskipTests&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.52&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5.53x&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is no gain from parallel execution here because we build just a single module.
All we can see are the gains from reusing the warmed-up Daemon JVM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We see that the first &lt;code&gt;mvnd&lt;/code&gt; run is slower than the &lt;code&gt;mvn&lt;/code&gt; baseline.
This can be explained through the overhead caused by starting the Daemon and connecting to it through a network socket.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But already the second &lt;code&gt;mvnd&lt;/code&gt; build is 4.66 faster than the &lt;code&gt;mvn&lt;/code&gt; baseline.
0.61 seconds vs. 2.86 seconds is a difference clearly perceivable by a human.
The third one is even faster.
0.52 seconds is pretty snappy for this kind of build.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configuration&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configuration&quot;&gt;&lt;/a&gt;Configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The behavior of Maven Daemon can be customized in many ways.
The options can be passed either via command line or can be stored permanently in one of the following locations
(in descending order of precedence):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;${maven.multiModuleProjectDirectory}/.mvn/mvnd.properties&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;${user.home}/.m2/mvnd.properties&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;${mvnd.home}/conf/mvnd.properties&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All configuration options and command line parameters can be listed via&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ mvnd --help&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It makes little sense to list them all here.
Let us pick a few interesting ones.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All stock Maven options, such as &lt;code&gt;-am/--also-make&lt;/code&gt;, &lt;code&gt;-B/--batch-mode&lt;/code&gt;, &lt;code&gt;-D/--define&lt;/code&gt;, &lt;code&gt;-P,--activate-profiles&lt;/code&gt;, &lt;code&gt;-v/-version&lt;/code&gt;, etc.
are supported also by &lt;code&gt;mvnd&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;--completion bash&lt;/code&gt; - the completion for Bash shell. You may want to add &lt;code&gt;source &amp;lt;(mvnd --completion bash)&lt;/code&gt; to your &lt;code&gt;~/bashrc&lt;/code&gt; or &lt;code&gt;~/.bash_profile&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;-Dmvnd.serial/-1/--serial&lt;/code&gt; - use one thread, no log buffering and the default project builder to behave like a standard Maven.
Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;discriminating_start_parameters&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#discriminating_start_parameters&quot;&gt;&lt;/a&gt;Discriminating start parameters&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When describing the way how client looks for an idle Daemon, we omitted an important detail:
the discriminating start parameters.
Those define the essential characteristics of the Daemon, such as the Java installation path, maximum heap size, etc.
which make it exclusive for some given build tasks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, if I set &lt;code&gt;JAVA_HOME&lt;/code&gt; to my Java 11 installation directory for the current shell,
I do not want &lt;code&gt;mvnd&lt;/code&gt; to pick a Daemon running on any other Java,
even if such Daemon is idle.
I rather want &lt;code&gt;mvnd&lt;/code&gt; to always pick a Daemon running on this exact Java even for the price of starting a new Daemon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are some discriminating start parameters along with a short description what they do:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;-Djava.home=&amp;lt;path&amp;gt;&lt;/code&gt; - Java home for starting the daemon.
Env. variable: &lt;code&gt;JAVA_HOME&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;-Dmvnd.idleTimeout=&amp;lt;duration&amp;gt;&lt;/code&gt; - a time period after which an unused Daemon will terminate by itself.
Default: 3 hours&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;-Dmvnd.duplicateDaemonGracePeriod=&amp;lt;duration&amp;gt;&lt;/code&gt; - period after which idle duplicate Daemons will be shut down.
Duplicate Daemons are daemons with the same set of discriminating start parameters.
Default: 10 seconds&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;-Dmvnd.maxHeapSize=&amp;lt;memory_size&amp;gt;&lt;/code&gt; - the &lt;code&gt;-Xmx&lt;/code&gt; value to pass to the Daemon. This option takes precedence over options specified in &lt;code&gt;-Dmvnd.jvmArgs&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ui_shortcuts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ui_shortcuts&quot;&gt;&lt;/a&gt;UI shortcuts&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The text based user interface (UI) of &lt;code&gt;mvnd&lt;/code&gt; supports a few shortcuts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt; reveals more rolling log lines for the individual builder threads
while &lt;code&gt;-&lt;/code&gt; reduces the number of rolling lines.
A UI state with zero rolling lines (default) is shown on the image above.
Below, you can see a UI state with three rolling lines per builder thread:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2023/2023-05-21-mvnd-maven-daemon/3-rolling-lines-per-module.png&quot; alt=&quot;3 rolling lines per builder thread&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;CTRL+B&lt;/code&gt; toggles between threaded (default, see above) and rolling views.
The rolling view can be seen below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2023/2023-05-21-mvnd-maven-daemon/rolling-view.png&quot; alt=&quot;Rolling view&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that every line is prefixed with the name of the module from which it originates.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;common_issues&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#common_issues&quot;&gt;&lt;/a&gt;Common issues&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you start using &lt;code&gt;mvnd&lt;/code&gt; in a project that was never built in parallel, you may hit some of these well known issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hidden_dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hidden_dependencies&quot;&gt;&lt;/a&gt;Hidden dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s assume that the modules in your project depend on each other as shown in the graph below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;    A
   / \
  B   C    (Lower depends on upper)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As long as you use the serial builder, the modules are always built in the same order
and each module is fully built before any subsequent module built is started.
Hence the order is always &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is very easy to start relying on this constant and strictly serial ordering.
For example the build of module &lt;code&gt;C&lt;/code&gt; could be reading a file in &lt;code&gt;B&amp;#8217;s `target&lt;/code&gt; folder.
Or &lt;code&gt;C&amp;#8217;s tests could dynamically read an artifact produced by `B&lt;/code&gt; from the local Maven repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All these assumptions won&amp;#8217;t hold anymore once you switch to a parallel builder.
&lt;code&gt;B&lt;/code&gt; can be built in parallel with &lt;code&gt;C&lt;/code&gt;.
As a consequence of that strange exceptions may occur.
The build of &lt;code&gt;C&lt;/code&gt; may throw a &lt;code&gt;FileNotFoundException&lt;/code&gt; if the desired file is not yet there in &lt;code&gt;B&amp;#8217;s `target&lt;/code&gt; directory.
Or you may see a &lt;code&gt;ClassNotFoundException&lt;/code&gt; if the build of &lt;code&gt;C&lt;/code&gt; opens an unfinished jar produced by &lt;code&gt;B&lt;/code&gt; at the same time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A simple an straightforward remedy would be to force serial build by using &lt;code&gt;-1/--serial&lt;/code&gt; parameter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another option is to make the dependency explicit.
If you do not want to propagate the dependency to runtime, you can use the &lt;code&gt;test&lt;/code&gt; scope
and exclude all transitives as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Add this in C --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupid&amp;gt;&lt;/span&gt;org.my-group&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupid&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactid&amp;gt;&lt;/span&gt;B&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactid&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${project.version}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span class=&quot;tag&quot;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupid&amp;gt;&lt;/span&gt;*&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupid&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactid&amp;gt;&lt;/span&gt;*&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactid&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This won&amp;#8217;t add any real dependency to C but it will guarantee that B is fully built before C.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;broken_plugins&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#broken_plugins&quot;&gt;&lt;/a&gt;Broken plugins&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Plugins may do all kinds of bad things that need to be avoided in parallelized environments.
Maintaining mutable global state (via static field or system property) is a typical example
that will inevitably lead to issues once the shared resource is accessed concurrently.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In such situations, the &lt;code&gt;-1/--serial&lt;/code&gt; command line parameter may help again.
Reporting the issue to the plugin maintainers might however bring better results in the long term.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;wrap_up&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#wrap_up&quot;&gt;&lt;/a&gt;Wrap up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have introduced Maven Daemon - a relatively new implementation of an older idea known from other build tools.
Its main purpose is speeding up the builds by keeping the builder JVM warm across multiple subsequent builds.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Source code, documentation, issues: &lt;a href=&quot;https://github.com/apache/maven-mvnd&quot; class=&quot;bare&quot;&gt;https://github.com/apache/maven-mvnd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Downloads: &lt;a href=&quot;https://downloads.apache.org/maven/mvnd&quot; class=&quot;bare&quot;&gt;https://downloads.apache.org/maven/mvnd&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="maven" /><category term="mvnd" /><summary type="html">mvnd - the Maven Daemon Maven is a well known build tool for Java and related languages targeting Java Virtual Machine (JVM). Its declarative approach to defining builds belongs to its main strengths. Even basic knowledge of Maven principles allows understanding basically any third party project. It is well established, rather stable and has a rich ecosystem of plugins. It is also very important for defining a de facto standard for publishing and consuming libraries in the JVM world. Maven Central and its artifact metadata formats are used and respected throughout the JVM space.</summary></entry><entry><title type="html">3D modelling and printing for fun and profit</title><link href="https://peter.palaga.org/2023/01/12/3d-printing-for-fun-and-profit.html" rel="alternate" type="text/html" title="3D modelling and printing for fun and profit" /><published>2023-01-12T00:00:00+00:00</published><updated>2023-01-12T00:00:00+00:00</updated><id>https://peter.palaga.org/2023/01/12/3d-printing-for-fun-and-profit</id><content type="html" xml:base="https://peter.palaga.org/2023/01/12/3d-printing-for-fun-and-profit.html">&lt;h1&gt;3D modelling and printing for fun and profit&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have bought &lt;a href=&quot;https://www.prusa3d.com/category/original-prusa-mini/&quot;&gt;Prusa Mini+&lt;/a&gt; 3D printer a couple of weeks ago.
I primarily wanted to use it for printing small things that are hard to produce in other ways.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I got rather surprised that my older son Vítek occupied it immediately for printing Lego bricks
he needed for his complicated guns. (Do not ask me why he builds guns. I hate it.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;IIRC, Vítek used &lt;a href=&quot;https://www.tinkercad.com/&quot;&gt;Tinkercad&amp;#8217;s&lt;/a&gt; &quot;Brick mode&quot; for modeling his Lego bricks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2023/2023-01-12-3d-printing-for-fun-and-profit/tinkercad-brick-mode.png&quot; alt=&quot;Tinkercad&amp;#8217;s brick mode&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;He printed them using &lt;a href=&quot;https://prusament.com/materials/prusament-petg/&quot;&gt;PETG&lt;/a&gt; material.
That&amp;#8217;s perhaps not optimal, but we do not have any other material yet.
Larger bricks turned out to be a bit smaller than LEGO originals so there was some tension when they were used together.
Tinkercad brick defaults would perhaps deserve some tuning.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So much about Vítek&amp;#8217;s 3D modeling and printing. Now about my own experiments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My younger son Viliam got a &lt;a href=&quot;https://tamiyabase.com/chassis/56-cc-01&quot;&gt;Tamiya CC-01&lt;/a&gt; based RC car as birthday present a couple of weeks ago.
It is pretty powerful and fast but its center of gravity is a bit too high so it tends to roll over
during sharp turns on rough surfaces.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We realized we needed a solution once we broke one side mirror in a roll over ☹.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Viliam did not not want to sacrifice maneuverability by limiting the max steering angle.
(That would be easy to set up on the transmitter.)
Therefore we had to look for another solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How about getting offset wheels thus making the car wider and more stable? - That&amp;#8217;s a perfect task for a 3D printer!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is how the original ones looked like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2023/2023-01-12-3d-printing-for-fun-and-profit/cc-01-original-wheels-front.jpg&quot; alt=&quot;Tamiya CC-02 Toyota Hilux Extra Cab - original wheels&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2023/2023-01-12-3d-printing-for-fun-and-profit/cc-01-original-wheels-side.jpg&quot; alt=&quot;Tamiya CC-02 Toyota Hilux Extra Cab - original wheels&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And this is how it looks like now after we added ~10 mm offset on each wheel:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2023/2023-01-12-3d-printing-for-fun-and-profit/cc-01-3d-printed-wheels-front.jpg&quot; alt=&quot;Tamiya CC-02 Toyota Hilux Extra Cab - 3D printed offset wheels&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2023/2023-01-12-3d-printing-for-fun-and-profit/cc-01-3d-printed-wheels-side.jpg&quot; alt=&quot;Tamiya CC-02 Toyota Hilux Extra Cab - 3D printed offset wheels&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I modeled the rim using &lt;a href=&quot;https://www.freecadweb.org/&quot;&gt;FreeCAD&lt;/a&gt; (&lt;code&gt;dnf install -y freecad&lt;/code&gt; on Fedora).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2023/2023-01-12-3d-printing-for-fun-and-profit/freecad.png&quot; alt=&quot;FreeCAD&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are the model files (licensed under &lt;a href=&quot;https://creativecommons.org/licenses/by/4.0/&quot;&gt;Creative Commons with Attribution 4.0&lt;/a&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/images/2023/2023-01-12-3d-printing-for-fun-and-profit/offset-wheel-rim-for-tamiya-cc-01.FCStd&quot;&gt;offset-wheel-rim-for-tamiya-cc-01.FCStd&lt;/a&gt; - the FreeCAD model file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/images/2023/2023-01-12-3d-printing-for-fun-and-profit/offset-wheel-rim-for-tamiya-cc-01.3mf&quot;&gt;offset-wheel-rim-for-tamiya-cc-01.3mf&lt;/a&gt; - a 3mf export with the infill and layer height settings I have used for printing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/images/2023/2023-01-12-3d-printing-for-fun-and-profit/offset-wheel-rim-for-tamiya-cc-01.stl&quot;&gt;offset-wheel-rim-for-tamiya-cc-01.stl&lt;/a&gt; - an STL just in case your tooling likes it better&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;/images/2023/2023-01-12-3d-printing-for-fun-and-profit/offset-wheel-rim-for-tamiya-cc-01.gcode&quot;&gt;offset-wheel-rim-for-tamiya-cc-01.gcode&lt;/a&gt; - for printing on a 3D printer without any tuning&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And here is the detailed view of the 3D print. It took roughly 3 hours 50 mins on Prusa Mini+ with 0.15 mm layer height and 30% gyroid infill using PETG filament.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2023/2023-01-12-3d-printing-for-fun-and-profit/cc-01-3d-printed-rim-wheel.jpg&quot; alt=&quot;3D printed offset wheel for Tamiya CC-01&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;</content><author><name></name></author><category term="leisure" /><category term="lego" /><category term="3D-printing" /><summary type="html">3D modelling and printing for fun and profit I have bought Prusa Mini+ 3D printer a couple of weeks ago. I primarily wanted to use it for printing small things that are hard to produce in other ways.</summary></entry><entry><title type="html">How I haven’t been scammed</title><link href="https://peter.palaga.org/2023/01/03/how-i-havent-been-scammed.html" rel="alternate" type="text/html" title="How I haven’t been scammed" /><published>2023-01-03T00:00:00+00:00</published><updated>2023-01-03T00:00:00+00:00</updated><id>https://peter.palaga.org/2023/01/03/how-i-havent-been-scammed</id><content type="html" xml:base="https://peter.palaga.org/2023/01/03/how-i-havent-been-scammed.html">&lt;h1&gt;How I haven&amp;#8217;t been scammed&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I happen to look for a new apartment these days.
I went through the process in the past so I can say I know what is usual and what is not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The case I want to tell you about now was a bit special.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I searched using the most common web property marketplace in the country where I live.
I found an apartment that matched my criteria
and I contacted the landlord through the site&amp;#8217;s contact form.
Within hours, I have got this reply:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please contact the landlord and ask about the Details:&lt;br&gt;
Diana&lt;br&gt;
dianaphelan49@outlook.com&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I contacted Diana, asking about when I could view the apartment. This was her answer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hello,&lt;br&gt;
I am the owner of the apartment at [&amp;#8230;&amp;#8203;].&lt;br&gt;
It has 1 bedroom, 1 bathroom, 1 kitchen (44 m2).&lt;br&gt;
The rent is [&amp;#8230;&amp;#8203;] /month including additional cost (warm rent).&lt;br&gt;
The security deposit is [&amp;#8230;&amp;#8203;], and you get it back when you decide to leave the apartment (you will have to give me at least 30 days' notice).&lt;br&gt;
A little bit about myself so we can get to know each other better.&lt;br&gt;
I am Diana Phelan, I am 51 Years old and I work in the GEF industry (deep water research) in the quality management department of a company located in Madrid.&lt;br&gt;
I would like to know something about you, for example, your occupation, financial situation, monthly income for people who will live in the apartment, how many people will have to live at home and for how long do you plan to stay?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope you got a good first impression, and please if you have any more questions don&amp;#8217;t hesitate to ask.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Kind regards from Spain,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Diana&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So far so good, I told her, what she wanted to know and again, I asked about inspecting the apartment.
Her reply made me a bit suspect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hello Peter,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks for telling me more about you.&lt;br&gt;
I have attached the draft rental agreement and copy of my passport. The apartment is available for long-term rental and is exactly as you can see in the pictures. As I said in my previous email, I live in Spain and will have to come and sign the rental agreement.&lt;br&gt;
If you are interested, I can send you the keys to see the apartment and decide if you want to rent it. After you see the apartment, if you agree to rent it, I will come to conclude the contract.&lt;br&gt;
I will send the keys using Valiant delivery https://valiant-transport.com&lt;br&gt;
You will pay the apartment security deposit using Valiant escrow payment because a few months ago I came there to meet a couple who was interested, but they never showed up, and I think you can imagine that it&amp;#8217;s not very comfortable to fly back and forth from Spain, especially when work commitments are made.&lt;br&gt;
This is Valiant&amp;#8217;s escrow service: https://valiant-transport.com/en/escrow&lt;br&gt;
Once you see the apartment, if for any reason you do not want to rent it, then you will receive the security deposit back. This is stated in the lease at point 21, but I assure you that the property is exactly as it looks in the photos.&lt;br&gt;
If everything sounds good to you, please provide me with the following details:&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your full name:&lt;br&gt;
Your current address:&lt;br&gt;
Your copy of passport:&lt;br&gt;
Your phone number:&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;PS: You will pay the first month of rent in the day you move into the apartment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Best regards,&lt;br&gt;
Diana&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first red flag was sending keys per post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then when reading it for the second time
and after reading about how the &quot;Valiant escrow&quot; service was supposed to work,
I realized she actually wants me to pay the deposit before she does anything - even before she sends the keys.
That was actually a big red flag.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I wondered whether I find something about &lt;code&gt;valiant-transport.com&lt;/code&gt; on Google:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2023/2023-01-03-how-i-have-not-got-scammed/valiant-transport.com-on-google.png&quot; alt=&quot;valiant-transport.com unknown to Google&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Very strange that Google did not know it at all. The first result was about &lt;code&gt;valianttransport.com&lt;/code&gt; without dash.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having looked at the domain name metadata via &lt;a href=&quot;https://lookup.icann.org/en/lookup&quot; class=&quot;bare&quot;&gt;https://lookup.icann.org/en/lookup&lt;/a&gt;, I found the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2023/2023-01-03-how-i-have-not-got-scammed/valiant-transport.com-dates.png&quot; alt=&quot;valiant-transport.com DNS registration dates&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The domain was registered just 4 days before the first contact with me!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moreover, the registrant&amp;#8217;s address &lt;code&gt;Kalkofnsvegur 2, Reykjavik, Capital Region, 101, IS&lt;/code&gt; and the phone number &lt;code&gt;+354.4212434&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2023/2023-01-03-how-i-have-not-got-scammed/valiant-transport.com-registrant.png&quot; alt=&quot;valiant-transport.com Registrant&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;was very well known to Google as a source of phishing and scam:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2023/2023-01-03-how-i-have-not-got-scammed/354.4212434-on-google.png&quot; alt=&quot;+354.4212434 on google&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point I was sure I was being scammed.
I reported the ad on the property marketplace and stopped responding to Diana.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another pointer was googling for a piece of text from &lt;code&gt;valiant-transport.com&lt;/code&gt;.
I took&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&quot;Complete one simple form and quotes come to you via email. Hassle-free, no phone calls required.&quot;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first result was &lt;a href=&quot;https://www.shiply.com/&quot; class=&quot;bare&quot;&gt;https://www.shiply.com/&lt;/a&gt; - a real shipping company.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just compare them side by side:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2023/2023-01-03-how-i-have-not-got-scammed/shiply.com-vs-valiant-transport.com.png&quot; alt=&quot;shiply.com vs valiant-transport.com&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These scammers created a fake shipping company site to get the money! Crazy, isn&amp;#8217;t it?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I can imagine, this kind of scam could have worked for less tech-savvy folks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anyway, I hope this blog post helps others to uncover any future attempts to use this fraud scheme.&lt;/p&gt;
&lt;/div&gt;</content><author><name></name></author><category term="private-life" /><summary type="html">How I haven&amp;#8217;t been scammed I happen to look for a new apartment these days. I went through the process in the past so I can say I know what is usual and what is not.</summary></entry><entry><title type="html">Lego 51515 on Fedora</title><link href="https://peter.palaga.org/2021/12/28/lego-51515-on-fedora.html" rel="alternate" type="text/html" title="Lego 51515 on Fedora" /><published>2021-12-28T00:00:00+00:00</published><updated>2021-12-28T00:00:00+00:00</updated><id>https://peter.palaga.org/2021/12/28/lego-51515-on-fedora</id><content type="html" xml:base="https://peter.palaga.org/2021/12/28/lego-51515-on-fedora.html">&lt;h1&gt;Lego 51515 on Fedora&lt;/h1&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My 13 years old son Vítek just got &lt;a href=&quot;https://www.lego.com/en-us/product/robot-inventor-51515&quot;&gt;LEGO 51515 (a.k.a. Robot Inventor)&lt;/a&gt; for Christmas.
He assessed the Scratch programming in the Android app as &quot;limiting&quot; after playing with it for a couple of hours and he uttered a wish to try Python.
Unfortunately, Lego does not provide any tools for Linux, the the main OS used within our family.
So we started to look for workarounds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All steps mentioned here were done on Fedora 34.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First we tried &lt;a href=&quot;https://github.com/smr99/lego-hub-tk&quot;&gt;LEGO Hub Toolkit&lt;/a&gt; by Steven M. Robbins which worked for us only through USB but not via Bluetooth.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Peter Staev&amp;#8217;s &lt;a href=&quot;https://github.com/PeterStaev/lego-spikeprime-mindstorms-vscode&quot;&gt;LEGO SPIKE Prime / MINDSTORMS Robot Inventor VS Code Extension&lt;/a&gt; offered the best experience so far.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;how_to_install_lego_spike_prime_mindstorms_robot_inventor_vs_code_extension&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#how_to_install_lego_spike_prime_mindstorms_robot_inventor_vs_code_extension&quot;&gt;&lt;/a&gt;How to install LEGO SPIKE Prime / MINDSTORMS Robot Inventor VS Code Extension&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course you need VS Code first.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;install_vs_code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#install_vs_code&quot;&gt;&lt;/a&gt;Install VS Code&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want the newest version, getting the 64 bit &lt;code&gt;.tar.gz&lt;/code&gt; flavor from &lt;a href=&quot;https://code.visualstudio.com/download#&quot;&gt;VS Code downloads page&lt;/a&gt; might be the safest choice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unpack it, once you have downloaded it to &lt;code&gt;~/Downloads&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ cd ~/bin
$ tar xfz ~/Downloads/code-stable-x64-*.tar.gz&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the &lt;code&gt;code&lt;/code&gt; executable to &lt;code&gt;PATH&lt;/code&gt; environment variable so that you can open any folder using &lt;code&gt;code .&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Open the &lt;code&gt;~/.bashrc&lt;/code&gt; file with &lt;code&gt;kwrite&lt;/code&gt; or any other text editor&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ kwrite ~/.bashrc&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and add the following line somewhere around the beginning of the file&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;export PATH=&amp;quot;$HOME/bin/VSCode-linux-x64/bin:$PATH&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Save and close the &lt;code&gt;~/.bashrc&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then create a new directory for your Python experiments and open VS Code in that directory:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ mkdir -p ~/code/python
$ cd ~/code/python
$ code .&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;install_the_lego_spike_prime_mindstorms_robot_inventor_extension&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#install_the_lego_spike_prime_mindstorms_robot_inventor_extension&quot;&gt;&lt;/a&gt;Install the LEGO SPIKE Prime / MINDSTORMS Robot Inventor Extension&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In VS Code, open the Extensions view by hitting &lt;code&gt;CTRL+SHIFT+x&lt;/code&gt;.
Then type &lt;code&gt;lego spike&lt;/code&gt; in the search field, select the found &lt;code&gt;LEGO SPIKE Prime / MINDSTORMS Robot Inventor Extension&lt;/code&gt;
and click the blue &lt;code&gt;Install&lt;/code&gt; button to install it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;connect_via_usb&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#connect_via_usb&quot;&gt;&lt;/a&gt;Connect via USB&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First let&amp;#8217;s try connecting via USB.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this to work on my Fedora 34, I had to add the current user to dialout group.
Otherwise I was getting the &lt;code&gt;Permission denied: '/dev/ttyACM0'&lt;/code&gt; error when connecting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ sudo usermod -aG dialout $USER&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You&amp;#8217;ll possibly need to restart VS Code or even re-login for the new group membership to get effective.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then you can connect the USB cable - one end to the Lego HUB and the other end to your computer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the bottom of the VS Code window, click the blue &lt;code&gt;LEGO Hub: Disconnected&lt;/code&gt; area&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2022/2021-12-28-lego-51515-on-fedora/lego-hub-disconnected.png&quot; alt=&quot;LEGO Hub: Disconnected&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This should let you select the device you want to connect:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2022/2021-12-28-lego-51515-on-fedora/select-device.png&quot; alt=&quot;Select device&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select &lt;code&gt;/dev/ttyACM0&lt;/code&gt; for USB.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the connection succeeds, a couple of new buttons should appear at the top of the VS Code window:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2022/2021-12-28-lego-51515-on-fedora/extension-buttons.png&quot; alt=&quot;Lego Hub Extension buttons&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These allow you to&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Start an already uploaded program&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stop the currently running program&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upload the current file (in VS Code) to the Hub&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Show the Hub&amp;#8217;s terminal where you can i.a. see the error messages if something goes wrong with your little program&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;hello_world&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hello_world&quot;&gt;&lt;/a&gt;Hello world!&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s try to write some simple program to make sure that the connection really works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create a new file named &lt;code&gt;test.py&lt;/code&gt; in the &lt;code&gt;~/code/python&lt;/code&gt; folder and paste the following into the editor:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;python&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# LEGO type:standard slot:5 autostart&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;hub&lt;/span&gt;
hub.sound.beep(&lt;span class=&quot;integer&quot;&gt;800&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;2000&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first line is specific to the extension and its meaning is documented in the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=PeterStaev.lego-spikeprime-mindstorms-vscode#automatic-uploadstart-of-a-python-file&quot;&gt;extension&amp;#8217;s README&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you have saved the file, you can hit the ⭮ button to upload and autostart it to the hub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should hear a two seconds beep if everything works correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;bluetooth&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#bluetooth&quot;&gt;&lt;/a&gt;Bluetooth&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To test the Bluetooth connection, first disconnect the USB by clicking the blue &lt;code&gt;LEGO Hub: Connected&lt;/code&gt; area at the bottom of the VS Code window. Then unplug the USB cable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Make sure Bluetooth is on on your PC e.g. by clicking the Blueman applet icon in the system tray.
If it shows an option &quot;Turn Bluetooth Off&quot;, then your Bluetooth is apparently on :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2022/2021-12-28-lego-51515-on-fedora/blueman-bt-on.png&quot; alt=&quot;Bluetooth is on&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then pair the hub:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Click the Blueman applet icon in the system tray and click &quot;Devices&quot;&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2022/2021-12-28-lego-51515-on-fedora/blueman-applet-devices.png&quot; alt=&quot;Blueman &amp;#8594; Devices&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure the Lego Hub is on and press the Bluetooth button on the Hub.
The Bluetooth button on the Hub should start flashing blue and you should hear some beeping.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then start scanning for BT devices by pressing &quot;Search&quot; in the Blueman Devices window&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2022/2021-12-28-lego-51515-on-fedora/blueman-devices-search.png&quot; alt=&quot;Blueman Devices &amp;#8594; Search&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After a while a device named &quot;LEGO Hub &amp;lt;Mac address&amp;gt;&quot; should appear in the list of devices:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2022/2021-12-28-lego-51515-on-fedora/lego-hub-found.png&quot; alt=&quot;Lego hub found&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open its context menu by right-clicking it and click &quot;Pair&quot;&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2022/2021-12-28-lego-51515-on-fedora/bt-pair-device.png&quot; alt=&quot;Pair the device&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;initial_serial_connection&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#initial_serial_connection&quot;&gt;&lt;/a&gt;Initial serial connection&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the device is paired, create a an initial serial connection with the device using Blueman that we will disconnect right away.
I am not quite sure why this is necessary.
I guess it creates the &lt;code&gt;/dev/rfcomm0&lt;/code&gt; device that persists after disconnecting and which the VS Code extension is not able to do itself for some reason.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Right-click the Hub in Devices window and click &quot;Connect to: Serial Port&quot;&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2022/2021-12-28-lego-51515-on-fedora/bt-serial-port.png&quot; alt=&quot;Connect to serial port&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once the connection succeeds the Bluetooth button on the Hub should stop flashing and should start shining blue without interruptions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure the the &lt;code&gt;rfcomm&lt;/code&gt; device was created:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ ps -Af | grep /dev/rfcom
ppalaga     4852    3657  0 14:27 ?        00:00:00 /usr/bin/python3 /usr/libexec/blueman-rfcomm-watcher /dev/rfcomm0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note the index of the device - it is &lt;code&gt;rfcomm0&lt;/code&gt; in our case, but it could be &lt;code&gt;rfcomm1&lt;/code&gt; or something else in your case.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disconnect the serial port via Blueman applet menu:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2022/2021-12-28-lego-51515-on-fedora/disconnect-serial-port.png&quot; alt=&quot;Disconnect the serial connection&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These initial serial connection steps need to be performed after every restart of the computer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;connect_via_bluetooth_from_vs_code&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#connect_via_bluetooth_from_vs_code&quot;&gt;&lt;/a&gt;Connect via Bluetooth from VS Code&lt;/h4&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Get back to VS Code and click the blue &lt;code&gt;LEGO Hub: Disconnected&lt;/code&gt; area&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2022/2021-12-28-lego-51515-on-fedora/lego-hub-disconnected.png&quot; alt=&quot;LEGO Hub: Disconnected&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This should let you select the device to connect to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are lucky, you see &lt;code&gt;/dev/rfcomm0&lt;/code&gt; with the exact index returned by &lt;code&gt;ps -Af | grep /dev/rfcomm&lt;/code&gt; above.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If your device is not there in the list, just type it manually.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2022/2021-12-28-lego-51515-on-fedora/select-rfcomm0.png&quot; alt=&quot;Select /dev/rfcomm0&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After that, the connection should succeed and the Bluetooth button on the Hub should start shining blue.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;upload_and_run_a_test_program&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#upload_and_run_a_test_program&quot;&gt;&lt;/a&gt;Upload and run a test program&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To test, whether it works, you can do some change in the &lt;code&gt;test.py&lt;/code&gt; program, e.g. prolong the duration of the beep from &lt;code&gt;2000&lt;/code&gt; to &lt;code&gt;5000&lt;/code&gt; milliseconds:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;python&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# LEGO type:standard slot:5 autostart&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;include&quot;&gt;hub&lt;/span&gt;
hub.sound.beep(&lt;span class=&quot;integer&quot;&gt;800&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;5000&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After saving the file, you can hit the ⭮ button to upload and autostart it to the Hub.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should hear a five seconds beep if everything works correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it for making the Hub work on Fedora. I hope I was able to save you some time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am looking forward to your feedback via &lt;a href=&quot;https://twitter.com/ppalaga&quot;&gt;Twitter&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;further_reading&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#further_reading&quot;&gt;&lt;/a&gt;Further reading&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the actual programming you may find the following resources helpful:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;LEGO Hub Python programming API:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://lego.github.io/MINDSTORMS-Robot-Inventor-hub-API/&quot; class=&quot;bare&quot;&gt;https://lego.github.io/MINDSTORMS-Robot-Inventor-hub-API/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sanjayseshan/spikeprime-vscode/wiki/Hub-Programming-API&quot; class=&quot;bare&quot;&gt;https://github.com/sanjayseshan/spikeprime-vscode/wiki/Hub-Programming-API&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://antonsmindstorms.com/2021/01/14/advanced-undocumented-python-in-spike-prime-and-mindstorms-hubs/&quot; class=&quot;bare&quot;&gt;https://antonsmindstorms.com/2021/01/14/advanced-undocumented-python-in-spike-prime-and-mindstorms-hubs/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FAQ and sample projects: &lt;a href=&quot;https://github.com/maarten-pennings/Lego-Mindstorms/tree/main/ms4&quot; class=&quot;bare&quot;&gt;https://github.com/maarten-pennings/Lego-Mindstorms/tree/main/ms4&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="leisure" /><category term="lego" /><category term="mindstorms" /><category term="51515" /><category term="python" /><summary type="html">Lego 51515 on Fedora My 13 years old son Vítek just got LEGO 51515 (a.k.a. Robot Inventor) for Christmas. He assessed the Scratch programming in the Android app as &quot;limiting&quot; after playing with it for a couple of hours and he uttered a wish to try Python. Unfortunately, Lego does not provide any tools for Linux, the the main OS used within our family. So we started to look for workarounds.</summary></entry><entry><title type="html">My talks on JavaLand 2021</title><link href="https://peter.palaga.org/2021/03/13/javaland.html" rel="alternate" type="text/html" title="My talks on JavaLand 2021" /><published>2021-03-13T00:00:00+00:00</published><updated>2021-03-13T00:00:00+00:00</updated><id>https://peter.palaga.org/2021/03/13/javaland</id><content type="html" xml:base="https://peter.palaga.org/2021/03/13/javaland.html">&lt;h1&gt;My talks on JavaLand 2021&lt;/h1&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am giving two talks on &lt;a href=&quot;https://www.javaland.eu/de/home/&quot;&gt;JavaLand 2021&lt;/a&gt;.
One is Quarkus deep dive for Extension authors
and the second one is about integrating systems with Apache Camel on Quarkus, Knative and Kafka Connect.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;will_my_library_or_framework_work_on_quarkus_and_graalvm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#will_my_library_or_framework_work_on_quarkus_and_graalvm&quot;&gt;&lt;/a&gt;Will my library or framework work on Quarkus (and GraalVM)?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wednesday March 17th 09:00 - 09:40 in Schauspielhaus, see &lt;a href=&quot;https://programm.javaland.eu/2021/#/scheduledEvent/606575&quot;&gt;JavaLand Schedule&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://peter.palaga.org/presentations/210317-quarkus-for-extension-authors/index.html&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Abstract: Let&amp;#8217;s unveil the magic behind Quarkus!
Quarkus makes fast boot times and low memory consumption of Java applications possible thanks to a technique called Compile time boot.
Quarkus extensions are its main building blocks.
They optimize applications by doing as much work as possible at compile time instead of repeating it on each boot.
This may include tasks like parsing configuration files, annotation lookups, building framework metamodel, etc.
We will explain how Quarkus extensions work by writing one from scratch.
You will be guided through several typical problems and their solutions that occur when porting libraries and frameworks to Quarkus and GraalVM.
The talk is aimed at potential authors and contributors of Quarkus extensions as well as everybody curious about Quarkus internals.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;integrating_systems_in_the_age_of_quarkus_knative_and_kafka&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#integrating_systems_in_the_age_of_quarkus_knative_and_kafka&quot;&gt;&lt;/a&gt;Integrating systems in the age of Quarkus, Knative and Kafka&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wednesday March 17th 17:00 - 17:40 in Quantum, see &lt;a href=&quot;https://programm.javaland.eu/2021/#/scheduledEvent/606579&quot;&gt;JavaLand Schedule&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://peter.palaga.org/presentations/210317-camel/index.html&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Abstract: Apache Camel has been the Swiss knife of integrating heterogeneous systems for more than a decade.
Let&amp;#8217;s check how the humpy ungulate adapts to the newest changes in the environment!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apache Camel integrations written on top of Quarkus start in a matter of milliseconds and consume just a few tens of megabytes of RAM.
We will explain the technology and show a live demo including the famous Quarkus dev mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then you will learn how the outstanding integration capabilities of Apache Camel enrich the serverless architectures based on Knative.
We will touch topics like auto-scaling and scaling to zero as well as content based routing of cloud events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, we will introduce the youngest member of the Camel family: the Camel Kafka Connector.
It brings the possibility to scalably and reliably stream data between Apache Kafka and the 300+ kinds of systems supported by Apache Camel.
We will clarify the underlying concepts and show how to use it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#160;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am looking forward to see you there!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="quarkus" /><category term="camel" /><summary type="html">My talks on JavaLand 2021 I am giving two talks on JavaLand 2021. One is Quarkus deep dive for Extension authors and the second one is about integrating systems with Apache Camel on Quarkus, Knative and Kafka Connect.</summary></entry><entry><title type="html">How to compile and install Stunt Rally on Fedora</title><link href="https://peter.palaga.org/2021/03/06/compile-and-install-stunt-rally-on-fedora.html" rel="alternate" type="text/html" title="How to compile and install Stunt Rally on Fedora" /><published>2021-03-06T00:00:00+00:00</published><updated>2021-03-06T00:00:00+00:00</updated><id>https://peter.palaga.org/2021/03/06/compile-and-install-stunt-rally-on-fedora</id><content type="html" xml:base="https://peter.palaga.org/2021/03/06/compile-and-install-stunt-rally-on-fedora.html">&lt;h1&gt;How to compile and install Stunt Rally on Fedora&lt;/h1&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2021/2021-03-06-install-stunt-rally-on-fadora/stuntrally.png&quot; alt=&quot;Stunt rally&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stunt Rally is an open source racing game, one of a few available for Linux. It caught the attention of my son because it supports network mutiplayer mode as well as split screen multiplayer mode. As of writing this, there does not seem to exist an RPM package. There are &lt;a href=&quot;https://snapcraft.io/stuntrally&quot;&gt;SNAP&lt;/a&gt; and &lt;a href=&quot;https://flathub.org/apps/details/org.tuxfamily.StuntRally&quot;&gt;Flatpack&lt;/a&gt; packages which I have not tried. If you do not want those for any reason, you might find this compilation guide useful.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On Fedora 32, I had to install the following prerequisites  to be able to compile:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;sudo dnf install -y boost-devel cmake hicolor-icon-theme desktop-file-utils mygui-devel ogre-devel ois-devel enet-devel SDL2-devel libvorbis-devel libXcursor-devel bullet-devel bullet-extras-devel shiny-devel tinyxml-devel tinyxml2-devel ogre-pagedgeometry-devel dejavu-lgc-sans-fonts liberation-sans-fonts bitstream-vera-sans-fonts bitstream-vera-sans-mono-fonts openal-soft-devel cmake g++ git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;clone_the_source_repositories&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#clone_the_source_repositories&quot;&gt;&lt;/a&gt;Clone the source repositories&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting from here, the steps are actually the same as on the &lt;a href=&quot;https://stuntrally.tuxfamily.org/wiki/doku.php?id=compile&quot;&gt;Stunt Rally wiki&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;git clone git://github.com/stuntrally/stuntrally.git
cd stuntrally
SR_HOME=&amp;quot;$(PWD)&amp;quot;
# get the tracks
cd data
git clone --depth=1 git://github.com/stuntrally/tracks.git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;enable_the_master_server_compilation_target_optional&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#enable_the_master_server_compilation_target_optional&quot;&gt;&lt;/a&gt;Enable the master server compilation target (optional)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to play in multiplayer mode,
having your own master server makes joining the game easier than direct connect.
Direct connect works too, but master server saves you some typing and clicking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To enable the master server compilation target, add &lt;code&gt;-DBUILD_MASTER_SERVER=ON&lt;/code&gt; to the &lt;code&gt;cmake&lt;/code&gt; command below&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;compile_the_game&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#compile_the_game&quot;&gt;&lt;/a&gt;Compile the game&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;cd &amp;quot;${SR_HOME}&amp;quot;
mkdir build
cd build

cmake -DBUILD_MASTER_SERVER=ON ..
make -j4        # Compile using 4 threads (change to your number of CPUs)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;install_optional&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#install_optional&quot;&gt;&lt;/a&gt;Install (optional)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;sudo make install&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;play_the_game_single_player&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#play_the_game_single_player&quot;&gt;&lt;/a&gt;Play the game (single player)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;${SR_HOME}/stuntrally&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;play_multiplayer&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#play_multiplayer&quot;&gt;&lt;/a&gt;Play multiplayer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;server&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#server&quot;&gt;&lt;/a&gt;Server&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the machine that will fulfill the server role, create a script like the following and name it e.g. &lt;code&gt;sr.sh&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;#!/bin/bash
set -x
set -e

# change to where you have the stuntrally and sr-masterserver binaries
SR_HOME=path/to/build

cd &amp;quot;${SR_HOME}&amp;quot;

# start the server

./sr-masterserver -p 4242 -V &amp;amp;

# start the game
./stuntrally

# kill the server after exiting the game
killall sr-masterserver&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then open the ports&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;firewall-cmd --add-port=4242/udp --permanent
firewall-cmd --add-port=4243/udp --permanent&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Start the game and master server using the &lt;code&gt;sr.sh&lt;/code&gt; script&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;sr.sh&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the game, go to Multiplayer &amp;gt; Settings&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2021/2021-03-06-install-stunt-rally-on-fadora/multiplayer-settings.png&quot; alt=&quot;Multiplayer &amp;gt; Settings&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Leave Local port unchanged&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the Master server IP to an address or hostname of the current machine your clients can access&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the Port to 4242&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Switch to Server tab and click Create game&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2021/2021-03-06-install-stunt-rally-on-fadora/create-game.png&quot; alt=&quot;Create game&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;clients&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#clients&quot;&gt;&lt;/a&gt;Clients&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Start the game as usual&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;${SR_HOME}/stuntrally&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to Multiplayer &amp;gt; Settings and perform the same changes as on the server&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2021/2021-03-06-install-stunt-rally-on-fadora/multiplayer-settings.png&quot; alt=&quot;Multiplayer &amp;gt; Settings&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Leave Local port unchanged&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the Master server IP to an address or hostname of the current machine your clients can access&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the Port to 4242&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Switch to Server tab and click Get/refresh list. The game created on the server should appear in the list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2021/2021-03-06-install-stunt-rally-on-fadora/refresh-list.png&quot; alt=&quot;Get/refresh list&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select the game and click Join game below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After that, the client should be visible in the list of players in the Game tab.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once all clients click the green Ready button, the game can be started on the server by pressing the green Start button.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="leisure" /><category term="games" /><summary type="html">How to compile and install Stunt Rally on Fedora Stunt Rally is an open source racing game, one of a few available for Linux. It caught the attention of my son because it supports network mutiplayer mode as well as split screen multiplayer mode. As of writing this, there does not seem to exist an RPM package. There are SNAP and Flatpack packages which I have not tried. If you do not want those for any reason, you might find this compilation guide useful.</summary></entry><entry><title type="html">Grouping Quarkus extension tests for faster execution</title><link href="https://peter.palaga.org/2021/02/16/grouping-quarkus-extension-tests.html" rel="alternate" type="text/html" title="Grouping Quarkus extension tests for faster execution" /><published>2021-02-16T00:00:00+00:00</published><updated>2021-02-16T00:00:00+00:00</updated><id>https://peter.palaga.org/2021/02/16/grouping-quarkus-extension-tests</id><content type="html" xml:base="https://peter.palaga.org/2021/02/16/grouping-quarkus-extension-tests.html">&lt;h1&gt;Grouping Quarkus extension tests for faster execution&lt;/h1&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Testing is a substantial ingredient of software quality.
Projects producing Quarkus extensions are not an exception.
While testing on traditional JVMs is rather fast and well understood,
testing GraalVM native executables brings new challenges, especially because it takes long:
It is one or more minutes for common test projects that we have in &lt;a href=&quot;https://github.com/apache/camel-quarkus&quot;&gt;Camel Quarkus&lt;/a&gt;.
Multiply it with our
&lt;a href=&quot;https://camel.apache.org/camel-quarkus/latest/reference/index.html&quot;&gt;~300 extensions&lt;/a&gt;
and you end up with tens of hours for a single pass of the CI.
Let&amp;#8217;s discuss some ways how to speed up the native testing,
esp. by merging several test modules into a single test module.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;quarkus_extension_testing_an_intro&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quarkus_extension_testing_an_intro&quot;&gt;&lt;/a&gt;Quarkus extension testing: An intro&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(Feel free to skip this if you know well how Quarkus extension tests work.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here we primarily speak about integration tests that typically consist of a small application in &lt;code&gt;src/main&lt;/code&gt;
and a couple of tests in &lt;code&gt;src/test&lt;/code&gt; that validate the behavior of the application.
The test module is supposed to depend on the tested extension
and the application is supposed to make use of that extension.
As an example, look at e.g.
the &lt;a href=&quot;https://github.com/apache/camel-quarkus/tree/master/integration-tests/activemq&quot;&gt;ActiveMQ test&lt;/a&gt;
in Camel Quarkus source tree.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are test classes of two kinds in &lt;code&gt;src/test/java&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Ending with &lt;code&gt;Test&lt;/code&gt; - those are for testing in JVM mode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ending with &lt;code&gt;IT&lt;/code&gt; - for testing in native mode.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While the JVM tests are run in the same JVM as the application under test,
the native tests are run in a process separate from the application.
This is because in the latter case the application is compiled to native executable
and that executable is run standalone (without any JVM).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this very reason, native tests must communicate with the tested application via network (or filesystem, etc.).
In JVM tests, there are a couple of other options, like directly injecting beans via CDI.
We avoid using this in Camel Quarkus, because our &lt;code&gt;*IT&lt;/code&gt; tests inherit from their &lt;code&gt;*Test&lt;/code&gt; counterparts
so that JVM tests generally check the same functionality as native tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we have pointed out already,
compiling the test application to native executable takes a substantial portion of the overall testing time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which options are there to speed it up?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;parallelize_the_execution&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#parallelize_the_execution&quot;&gt;&lt;/a&gt;Parallelize the execution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course Quarkus integration tests can be run in parallel on multiple worker nodes.
It is easy to implement in environments like GitHub Actions and indeed, we are keen on
&lt;a href=&quot;https://github.com/apache/camel-quarkus/blob/9c381417e09c1e3e9bee574a41fcf5b3a6b99c7d/.github/workflows/ci-build.yaml#L109&quot;&gt;utilizing&lt;/a&gt; it in Camel Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The not-so-good news is that GitHub Actions
&lt;a href=&quot;https://docs.github.com/en/actions/reference/usage-limits-billing-and-administration#usage-limits&quot;&gt;limits&lt;/a&gt;
the number of concurrent jobs to 20 (in the free tier at least).
That currently makes our pull request verification to take around two hours
which is still outside of my comfort zone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What other optimizations can be implemented?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;incremental_testing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#incremental_testing&quot;&gt;&lt;/a&gt;Incremental testing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Falko Modler works on introducing
&lt;a href=&quot;https://github.com/gitflow-incremental-builder/gitflow-incremental-builder&quot;&gt;Gitflow incremental builder&lt;/a&gt;
to Quarkus. While it has tremendous potential, it is still &lt;a href=&quot;https://github.com/quarkusio/quarkus/pull/13243&quot;&gt;work in progress&lt;/a&gt;.
Let&amp;#8217;s wait and see how well it goes in Quarkus.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;grouping_of_extension_tests&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#grouping_of_extension_tests&quot;&gt;&lt;/a&gt;Grouping of extension tests&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is actually the idea I wanted this blog post to be about 🙂.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The core hypothesis of this approach is that the native compilation of an application
consisting of JARs A, B and C
generally takes less time than the sum of compilation times of two separate applications consisting of
(1) A and B and (2) A and C respectively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, A is thought to be some common base that is found in both (1) and (2).
We typically have this situation in our integration tests
- they all contain &lt;code&gt;quarkus-core&lt;/code&gt;, &lt;code&gt;camel-quarkus-core&lt;/code&gt;, &lt;code&gt;quarkus-resteasy&lt;/code&gt;
(plus all their transitive dependencies)
and last but not least all the Java runtime classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We assume that especially for test modules, whose dependency sets differ by just a few small JARs,
&quot;merging&quot; them together into a single module may save some native compilation time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We actually did this since a log time, e.g. with our AWS extensions,
but nobody bothered to gather some real numbers to confirm or deny the hypothesis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;what_could_go_wrong&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#what_could_go_wrong&quot;&gt;&lt;/a&gt;What could go wrong?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before I show you the benchmarks, let&amp;#8217;s discuss what are the risks and drawbacks of test grouping.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/nethertron2000&quot;&gt;James&lt;/a&gt; pointed out once that &quot;extensions may fix each other&quot;.
If extension A forgets to register some class for reflection that extension B does register, then,
when the two are used together in an application, B provides the necessary config and the tests pass.
However, if A would be alone without B in a test application the tests would fail
because the registration for reflection is missing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this reason, hard coding multiple extensions' tests into a single test module might be risky.
Ideally, it should be possible to have both:
the faster grouped setup for pull request verification
and the slower but methodologically cleaner isolated setup for proper nightly/weekly/pre-release verification.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;semi_automatic_grouping&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#semi_automatic_grouping&quot;&gt;&lt;/a&gt;Semi-automatic grouping&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have recently split a couple of
&lt;a href=&quot;https://github.com/apache/camel-quarkus/tree/master/integration-tests-aws2&quot;&gt;AWS tests&lt;/a&gt;
properly and I have also put
&lt;a href=&quot;https://github.com/apache/camel-quarkus/blob/83e5c768b6196de7a7fb04990c3a40e2a22d24f7/integration-tests/aws2-grouped/pom.xml#L44&quot;&gt;some&lt;/a&gt;
&lt;a href=&quot;https://github.com/apache/camel-quarkus/blob/83e5c768b6196de7a7fb04990c3a40e2a22d24f7/integration-tests/aws2-grouped/pom.xml#L218-L238&quot;&gt;tooling&lt;/a&gt; in place that generates the
grouped module semi-automatically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In that way it is easy to run the tests both in isolation and grouped whichever suits better for the given use case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And thanks to this setup, it is also quite easy to compare the duration of the grouped and isolated execution.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;benchmarks&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#benchmarks&quot;&gt;&lt;/a&gt;Benchmarks&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My measurements were not perfectly scientific, because I performed just a single round and I had other programs running.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My machine:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AMD Ryzen Threadripper 1920X, 12 cores @ 2162 MHz&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;64 GB RAM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HDD SSD Samsung 970 EVO&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fedora 31&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are the numbers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2021/2021-02-16-grouping-quarkus-extension-tests/benchmarks.png&quot; alt=&quot;Grouping vs. duration&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Grouping&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Duration (sec)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Isolated&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;620&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Grouped&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;321&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The time difference is about 5 minutes and it might be a bit more on slowish CI worker nodes.
That&amp;#8217;s definitely worth the effort!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;possible_next_step&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#possible_next_step&quot;&gt;&lt;/a&gt;Possible next step&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are planning to add more AWS tests in the near future.
It will be interesting to see how the grouped module scales with the number of tested extensions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;steps_to_reproduce&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#steps_to_reproduce&quot;&gt;&lt;/a&gt;Steps to reproduce&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;export GRAALVM_HOME=...
$ $GRAALVM_HOME/bin/java -version
openjdk version &amp;quot;11.0.10&amp;quot; 2021-01-19
OpenJDK Runtime Environment GraalVM CE 20.3.1 (build 11.0.10+8-jvmci-20.3-b09)
OpenJDK 64-Bit Server VM GraalVM CE 20.3.1 (build 11.0.10+8-jvmci-20.3-b09, mixed mode, sharing)

# clone Camel Quarkus
$ git clone git@github.com:apache/camel-quarkus.git
$ cd camel-quarkus
$ CQ_HOME=$(pwd)

# This is the revision I worked with:
$ git reset --hard 83e5c768b6196de7a7fb04990c3a40e2a22d24f7

# Build the whole tree without tests
$ mvn clean install -Dquickly

# Run the isolated tests, both JVM and native
$ cd $CQ_HOME/integration-tests-aws2
$ mvn clean verify -Pnative
# record the duration reported by Maven

# Run the grouped tests, both JVM and native
$ cd $CQ_HOME/integration-tests/aws2-grouped
$ mvn clean verify -Pnative
# record the duration reported by Maven&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#160;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks for reading and stay &lt;a href=&quot;https://twitter.com/ppalaga&quot;&gt;tuned&lt;/a&gt; for more posts about Quarkus, GraalVM, Apache Camel and &lt;code&gt;mvnd&lt;/code&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="quarkus" /><summary type="html">Grouping Quarkus extension tests for faster execution Testing is a substantial ingredient of software quality. Projects producing Quarkus extensions are not an exception. While testing on traditional JVMs is rather fast and well understood, testing GraalVM native executables brings new challenges, especially because it takes long: It is one or more minutes for common test projects that we have in Camel Quarkus. Multiply it with our ~300 extensions and you end up with tens of hours for a single pass of the CI. Let&amp;#8217;s discuss some ways how to speed up the native testing, esp. by merging several test modules into a single test module.</summary></entry><entry><title type="html">Using GraalVM native-image-agent when porting a library to Quarkus</title><link href="https://peter.palaga.org/2021/01/31/using-native-image-agent-when-porting-a-lib-to-quarkus.html" rel="alternate" type="text/html" title="Using GraalVM native-image-agent when porting a library to Quarkus" /><published>2021-01-31T00:00:00+00:00</published><updated>2021-01-31T00:00:00+00:00</updated><id>https://peter.palaga.org/2021/01/31/using-native-image-agent-when-porting-a-lib-to-quarkus</id><content type="html" xml:base="https://peter.palaga.org/2021/01/31/using-native-image-agent-when-porting-a-lib-to-quarkus.html">&lt;h1&gt;Using GraalVM &lt;code&gt;native-image-agent&lt;/code&gt; when porting a library to Quarkus&lt;/h1&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I pondered a bit how &lt;a href=&quot;https://www.graalvm.org/reference-manual/native-image/BuildConfiguration/#assisted-configuration-of-native-image-builds&quot;&gt;GraalVM&amp;#8217;s &lt;code&gt;native-image-agent&lt;/code&gt;&lt;/a&gt; can be leveraged when writing Quarkus extensions.
Even if the configuration produced by it won’t be 100% complete and relevant, it may give you a good initial impression
where to look and which kinds of problems you need to solve.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;background&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Native compilation of Java using GraalVM&amp;#8217;s &lt;code&gt;native-image&lt;/code&gt; tool typically requires a lot of
&lt;a href=&quot;https://www.graalvm.org/reference-manual/native-image/BuildConfiguration/&quot;&gt;configuration&lt;/a&gt;.
You need to list classes/methods/fields that require reflection, you need to register proxies,
you need to declare which classes have to be initialized at runtime instead of build time, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are on &lt;a href=&quot;https://quarkus.io/&quot;&gt;Quarkus&lt;/a&gt;, you usually do not need to care for these nitty-gritty details
because Quarkus does it for you under the hood and &lt;code&gt;mvn package -Dnative&lt;/code&gt; is all you need to know.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But say, that you are not so lucky to have a ready to use Quarkus extension for some library and you want to write one.
Folks who are not able or not wanting to use Quarkus are actually in quite a similar situation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configuring_native_image&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#configuring_native_image&quot;&gt;&lt;/a&gt;Configuring &lt;code&gt;native-image&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So how can the &lt;code&gt;native-image&lt;/code&gt; configuration be put together? Generally speaking there are three options:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;a_pure_knowledge&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#a_pure_knowledge&quot;&gt;&lt;/a&gt;A. Pure knowledge&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You are a GraalVM guru and you know your complete class path so well
that you can write your &lt;code&gt;native-image&lt;/code&gt; configuration from top of your head.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well, this is probably not your case, because you are reading this blog post 😜&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;b_trial_and_error&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#b_trial_and_error&quot;&gt;&lt;/a&gt;B. Trial and error&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You first try to compile your application with no configuration at all.
If the compilation fails, you try to understand the error message and fix what&amp;#8217;s necessary.
If the message does not make any sense to you, you paste it to google and you hope to find a solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the compilation succeeds, you start testing the native executable.
It may fail with some &lt;code&gt;ClassNotFoundException&lt;/code&gt; if you forgot to register some class for reflection
or with a &lt;code&gt;NullPointerException&lt;/code&gt; if you forgot to embed some resources to the native image.
It may also fail with some cryptic exception that you have no clue about.
You google again and you either find a solution that works for you
or you see only reports of frustration similar to your own.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;c_native_image_agent&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#c_native_image_agent&quot;&gt;&lt;/a&gt;C. &lt;code&gt;native-image-agent&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The official &lt;a href=&quot;https://www.graalvm.org/reference-manual/native-image/BuildConfiguration/#assisted-configuration-of-native-image-builds&quot;&gt;recommendation of GraalVM&lt;/a&gt; is to use their &lt;code&gt;native-image-agent&lt;/code&gt;.
You are supposed to put your application (with the agent attached) under a load
that hits all execution paths that will be active also in production.
Based on the runtime data, the agent outputs a configuration in a format acceptable for &lt;code&gt;native-image&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This sounds very promising, but of course the main caveat is that
if you are unable to simulate the production load properly during the test runs,
then the produced configuration will not be complete.
Your native application may thus fail in production.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Besides that, the agent records only the usage of some features (namely JNI, Reflection, Proxies and class path resources)
while it does not help with configuring others, like delayed class initialization.
So you still may have to assemble some parts of the configuration manually.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;native_image_vs_quarkus&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#native_image_vs_quarkus&quot;&gt;&lt;/a&gt;&lt;code&gt;native-image&lt;/code&gt; vs. Quarkus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;native-image-agent&lt;/code&gt; was designed for use on plain GraalVM, without Quarkus.
How can we benefit from it when writing Quarkus extensions?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main idea here is to attach it to the JVM running the application against which we run integration tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;write_tests_first&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#write_tests_first&quot;&gt;&lt;/a&gt;Write tests first&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When porting a library or framework to Quarkus, I always start with writing some tests.
Ideally, they should be integration tests.
It means that there should be a real Quarkus application in &lt;code&gt;src/main/java&lt;/code&gt;
and the tests should communicate with it only via network protocols, like HTTP.
The tests should cover all important use cases of the ported library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check &lt;a href=&quot;https://quarkus.io/guides/getting-started-testing&quot;&gt;Quarkus testing guide&lt;/a&gt;
to learn how to write integration tests for Quarkus applications.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If I am extremely lucky, the tests just pass in native mode
and the library can be considered working in native without any native image configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But that&amp;#8217;s very rare. The tests usually pass in JVM mode and they fail in native mode
because some piece of &lt;code&gt;native-image&lt;/code&gt; configuration is missing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;run_tests_with_native_image_agent_attached&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#run_tests_with_native_image_agent_attached&quot;&gt;&lt;/a&gt;Run tests with &lt;code&gt;native-image-agent&lt;/code&gt; attached&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you do not know the internals of the ported library well, &lt;code&gt;native-image-agent&lt;/code&gt; may come in very handy.
Even if the configuration produced by it won&amp;#8217;t be 100% complete and relevat,
it may give you a good initial impression where to look and which kinds of problems you need to solve.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How can you attach &lt;code&gt;native-image-agent&lt;/code&gt; to your tests?
Let me explain first how
&lt;a href=&quot;https://quarkus.io/guides/getting-started-testing#recap-of-http-based-testing-in-jvm-mode&quot;&gt;Quarkus JVM tests&lt;/a&gt;
annotated with &lt;code&gt;@QuarkusTest&lt;/code&gt; work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When running the tests from Maven via &lt;code&gt;mvn test&lt;/code&gt; there are two JVMs taking part in the game:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;The main Maven JVM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A separate JVM started by surefire to run the tests&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Should &lt;code&gt;native-image-agent&lt;/code&gt; be attached to the second one?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While it is certainly the better of the two options, it is still not perfect.
The problem is that this JVM is used not only to run the application under test (living under &lt;code&gt;src/main&lt;/code&gt;),
but also the test code living under &lt;code&gt;src/test&lt;/code&gt;.
Clearly, we do not intend to compile the tests to native. We only want to compile the application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, how can we split the second JVM into a test JVM and an application JVM?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have found the following hammer-and-nails procedure (please &lt;a href=&quot;https://twitter.com/ppalaga&quot;&gt;let me know&lt;/a&gt; if you know a better one):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Remove the &lt;code&gt;@QuarkusTest&lt;/code&gt; annotation from all your test classes.
Why? Because otherwise Quarkus JUnit extension would start the application in the test JVM
and that&amp;#8217;s exactly what we&amp;#8217;d like to avoid.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Package your application skipping the tests&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ mvn clean package -DskipTests&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start your application manually using GraalVM JRE (in which &lt;code&gt;native-image-agent&lt;/code&gt; is available)
with the agent attached and &lt;code&gt;test&lt;/code&gt; Quarkus profile activated:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ export JAVA_HOME=/path/to/graalvm-ce-java11-...
$ $JAVA_HOME/bin/java -agentlib:native-image-agent=config-output-dir=target/graal-config&amp;quot; -Dquarkus.profile=test -jar target/*-runner.jar
...
2021-01-31 15:58:31,675 INFO  [io.quarkus] (main) Profile test activated.
2021-01-31 15:58:31,676 INFO  [io.quarkus] (main) Installed features: [..., cdi, resteasy]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the tests in another terminal:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ mvn test # or alternatively mvn surefire:test might suffice too
...
[INFO] BUILD SUCCESS&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When all the tests have passed, terminate the application running in the first terminal by pressing &lt;code&gt;CTRL+C&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After that, the configuration for &lt;code&gt;native-image&lt;/code&gt; should be stored in &lt;code&gt;target/graal-config&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ tree target/graal-config
target/graal-config
├── proxy-config.json
├── reflect-config.json
├── resource-config.json
└── ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;update_2021_02_17&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#update_2021_02_17&quot;&gt;&lt;/a&gt;Update 2021-02-17:&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/helpermethod/status/1362023754033987584&quot;&gt;Oliver Weiler&lt;/a&gt; proposed another approach:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can use the Surefire JVM,
but ignore all test-related classes by supplying an &lt;code&gt;access-filter.json&lt;/code&gt; file to the &lt;code&gt;native-image-agent&lt;/code&gt;.
See &lt;a href=&quot;https://www.graalvm.org/reference-manual/native-image/BuildConfiguration/#access-filters&quot;&gt;Access Filters docs&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;translate_the_generated_config_to_quarkus_builditems&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#translate_the_generated_config_to_quarkus_builditems&quot;&gt;&lt;/a&gt;Translate the generated config to Quarkus &lt;code&gt;BuildItems&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the &lt;code&gt;native-image-agent&lt;/code&gt; has generated the configuration, you can study the content of the files
and consider whether and how you need to translate the individual items to Quarkus &lt;code&gt;BuildItems&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check &lt;a href=&quot;https://quarkus.io/guides/writing-extensions&quot;&gt;Quarkus for extension authors&lt;/a&gt; to learn Quarkus extensions basics.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You typically do not need to care for all configuration items
because some of them are already covered by some core Quarkus extension,
such as &lt;code&gt;quarkus-netty&lt;/code&gt;, &lt;code&gt;quarkus-jackson&lt;/code&gt;, &lt;code&gt;quarkus-vertx&lt;/code&gt;, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the ones that are apparently related to the library you are porting, the mapping goes like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;proxy-config.json&lt;/code&gt; → &lt;code&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/blob/master/core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageProxyDefinitionBuildItem.java&quot;&gt;NativeImageProxyDefinitionBuildItem&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reflect-config.json&lt;/code&gt; → &lt;code&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/blob/master/core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/ReflectiveClassBuildItem.java&quot;&gt;ReflectiveClassBuildItem&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;resource-config.json&lt;/code&gt; → &lt;code&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/blob/master/core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageResourceBuildItem.java&quot;&gt;NativeImageResourceBuildItem&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://github.com/quarkusio/quarkus/blob/master/core/deployment/src/main/java/io/quarkus/deployment/builditem/nativeimage/NativeImageResourceBundleBuildItem.java&quot;&gt;NativeImageResourceBundleBuildItem&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check &lt;a href=&quot;https://quarkus.io/guides/all-builditems&quot;&gt;Quarkus &lt;code&gt;BuildItem&lt;/code&gt;s reference&lt;/a&gt; for more details about the available &lt;code&gt;BuildItem&lt;/code&gt;s.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Example: If you have something like the following in your &lt;code&gt;reflect-config.json&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;[
{
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;com.azure.core.util.DateTimeRfc1123&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;allDeclaredFields&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;true&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;allDeclaredMethods&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;true&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;allDeclaredConstructors&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;true&lt;/span&gt;
},
{
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;com.azure.storage.blob.implementation.models.BlobsGetPropertiesResponse&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;allDeclaredConstructors&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;true&lt;/span&gt;
}
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;this is how you would translate it to a Quarkus &lt;code&gt;@BuildStep&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;AzureBuildSteps&lt;/span&gt; {

    &lt;span class=&quot;annotation&quot;&gt;@BuildStep&lt;/span&gt;
    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; reflectiveClasses(BuildProducer&amp;lt;ReflectiveClassBuildItem&amp;gt; reflectiveClasses) {

        reflectiveClasses.produce(
                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReflectiveClassBuildItem(
                        &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// allDeclaredMethods required&lt;/span&gt;
                        &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// allDeclaredFields required&lt;/span&gt;
                        &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;com.azure.core.util.DateTimeRfc1123&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;));

        reflectiveClasses.produce(
                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReflectiveClassBuildItem(
                        &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// allDeclaredMethods not required&lt;/span&gt;
                        &lt;span class=&quot;predefined-constant&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// allDeclaredFields not required&lt;/span&gt;
                        &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;com.azure.storage.blob.implementation.models.BlobsGetPropertiesResponse&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;));

    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;is_that_all&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#is_that_all&quot;&gt;&lt;/a&gt;Is that all?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Not necessarily.
As I have mentioned above, &lt;code&gt;native-image-agent&lt;/code&gt; does not handle all aspects of the configuration.
Running the tests in native mode may reveal more issues that may require additional &lt;code&gt;BuildItem&lt;/code&gt;s
or even GraalVM &lt;a href=&quot;https://github.com/oracle/graal/blob/2c334c4db1ccd09b1a7ec5abdabad2e8ffe2d407/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/annotate/TargetClass.java#L36-L70&quot;&gt;substitutions&lt;/a&gt;.
That&amp;#8217;s already beyond the scope of this blog post where I primarily wanted to show
how &lt;code&gt;native-image-agent&lt;/code&gt; can be leveraged when writing Quarkus extensions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks for reading, stay &lt;a href=&quot;https://twitter.com/ppalaga&quot;&gt;tuned&lt;/a&gt; for more posts about Quarkus, GraalVM, Apache Camel and &lt;code&gt;mvnd&lt;/code&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="quarkus" /><summary type="html">Using GraalVM native-image-agent when porting a library to Quarkus I pondered a bit how GraalVM&amp;#8217;s native-image-agent can be leveraged when writing Quarkus extensions. Even if the configuration produced by it won’t be 100% complete and relevant, it may give you a good initial impression where to look and which kinds of problems you need to solve.</summary></entry><entry><title type="html">mvnd tip: Solving common issues of parallel builds</title><link href="https://peter.palaga.org/2021/01/12/mvnd-solving-common-issues-of-parallel-builds.html" rel="alternate" type="text/html" title="mvnd tip: Solving common issues of parallel builds" /><published>2021-01-12T00:00:00+00:00</published><updated>2021-01-12T00:00:00+00:00</updated><id>https://peter.palaga.org/2021/01/12/mvnd-solving-common-issues-of-parallel-builds</id><content type="html" xml:base="https://peter.palaga.org/2021/01/12/mvnd-solving-common-issues-of-parallel-builds.html">&lt;h1&gt;&lt;code&gt;mvnd&lt;/code&gt; tip: Solving common issues of parallel builds&lt;/h1&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;/2021/01/11/mvnd-parallel-builds.html#smart_builder_by_default&quot;&gt;previous &lt;code&gt;mvnd&lt;/code&gt; tip&lt;/a&gt;, we have introduced
&lt;code&gt;mvnd&lt;/code&gt;'s &lt;code&gt;smart&lt;/code&gt; builder and explained how it works. Today, I&amp;#8217;d like discuss various issues you may hit when
migrating from Maven &lt;code&gt;singlethreaded&lt;/code&gt; builder and I&amp;#8217;ll propose some solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;hidden_dependencies_between_modules&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hidden_dependencies_between_modules&quot;&gt;&lt;/a&gt;Hidden dependencies between modules&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Switching to &lt;code&gt;mvnd&lt;/code&gt; and its &lt;code&gt;smart&lt;/code&gt; builder may reveal that modules in your source tree have some hidden
dependencies. You may have never noticed these when building with standard Maven&amp;#8217;s &lt;code&gt;singlethreaded&lt;/code&gt; builder,
because it orders the modules deterministically not only based on explicit &lt;code&gt;&amp;lt;dependency&amp;gt;&lt;/code&gt; relationships, but also
based on the order of modules in the &lt;code&gt;&amp;lt;modules&amp;gt;&lt;/code&gt; element. If your modules depend on each other like this&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;text&quot;&gt;    A
   / \
  B   C    (Lower depends on upper)
   \ /
    D&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and if these modules are ordered like this in the parent &lt;code&gt;pom.xml&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;modules&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;A&lt;span class=&quot;tag&quot;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;B&lt;span class=&quot;tag&quot;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;C&lt;span class=&quot;tag&quot;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;D&lt;span class=&quot;tag&quot;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/modules&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;then with &lt;code&gt;singlethreaded&lt;/code&gt; Maven builder, the module &lt;code&gt;B&lt;/code&gt; is always completely built before the module &lt;code&gt;C&lt;/code&gt;.
The build will work fine even if &lt;code&gt;C&lt;/code&gt; has some non-explicit dependency on &lt;code&gt;B&lt;/code&gt;.
For instance, it could be reading a file in &lt;code&gt;B&lt;/code&gt;'s &lt;code&gt;target&lt;/code&gt; folder, its test could dynamically read an artifact
produced by module &lt;code&gt;B&lt;/code&gt; from the local Maven repository, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A build like this may start failing with &lt;code&gt;smart&lt;/code&gt; builder or &lt;code&gt;multithreaded&lt;/code&gt; builder.
Because concurrency is a part of the game, the failure may happen sporadically and the symptoms may include something like&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;File &lt;code&gt;B/target/whatever&lt;/code&gt; not found exception thrown during the build of module &lt;code&gt;C&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(On Windows) &lt;code&gt;clean&lt;/code&gt; unable to delete the file in &lt;code&gt;B/target&lt;/code&gt; because some part of the &lt;code&gt;C&lt;/code&gt; build is reading it, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;remedy&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#remedy&quot;&gt;&lt;/a&gt;Remedy&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are more ways to solve this, but I am going to show you only the most generic one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to instruct &lt;code&gt;smart&lt;/code&gt; or &lt;code&gt;multithreaded&lt;/code&gt; builder to build &lt;code&gt;B&lt;/code&gt; before &lt;code&gt;C&lt;/code&gt;, put the following dependency into &lt;code&gt;C&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.my-group&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;B&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${project.version}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span class=&quot;tag&quot;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;*&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;*&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It won&amp;#8217;t add any real dependency to &lt;code&gt;C&lt;/code&gt; but it will guarantee that &lt;code&gt;B&lt;/code&gt; is fully built before &lt;code&gt;C&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;plugins_relying_on_global_mutable_state&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#plugins_relying_on_global_mutable_state&quot;&gt;&lt;/a&gt;Plugins relying on global mutable state&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some Maven plugin used in your build may rely on some data stored in a mutable global variable.
Using Java system properties in the following way is a typical example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;Java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Mojo&lt;/span&gt;(name = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;some-mojo&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;SomeMojo&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;extends&lt;/span&gt; AbstractMojo {
    &lt;span class=&quot;annotation&quot;&gt;@Parameter&lt;/span&gt;(property = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, required = &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;, readonly = &lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;)
    &lt;span class=&quot;directive&quot;&gt;protected&lt;/span&gt; MavenProject project;

    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; execute() {
        &lt;span class=&quot;predefined-type&quot;&gt;System&lt;/span&gt;.setProperty(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;currentArtifactId&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, project.getArtifact().getArtifactId());
        &lt;span class=&quot;comment&quot;&gt;// some code assuming that this instance of the mojo observes what we have set&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;// on the previous line&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;assert&lt;/span&gt; project.getArtifact().getArtifactId().equals(&lt;span class=&quot;predefined-type&quot;&gt;System&lt;/span&gt;.getProperty(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;currentArtifactId&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the snippet above, the &lt;code&gt;currentArtifactId&lt;/code&gt; system property is set at the beginning of the &lt;code&gt;execute()&lt;/code&gt; method
and the author apparently assumes that the method cannot be called from multiple threads concurrently.
The assumption holds when building with the &lt;code&gt;singlethreaded&lt;/code&gt; builder,
but it does not with &lt;code&gt;smart&lt;/code&gt; and &lt;code&gt;multithreaded&lt;/code&gt; builders.
If modules are built in parallel, it may happen
that instance 2 of the mojo will overwrite the value of the property value set by instance 1 before the instance 1 can read it.
Instance 1 thus observes the value set by instance 2 and the assertion in the above snippet will fail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;remedy_2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#remedy_2&quot;&gt;&lt;/a&gt;Remedy&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The primary recommendation for this kind issue is to go and fix the given plugin.
Or at least report the issue in its issue tracker.
Or in case the issue was reported already, make sure that you upvote the issue so that the plugin author sees that the issue matters to you.
In that way the issue can be fixed once for all users of &lt;code&gt;mvnd&lt;/code&gt; and for all users of &lt;code&gt;multithreaded&lt;/code&gt; builder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After reporting the issue, you may also consider &lt;a href=&quot;/2021/01/11/mvnd-parallel-builds.html#mavens_serial_builder_via_1_serial&quot;&gt;falling back to &lt;code&gt;singlethreaded&lt;/code&gt; builder&lt;/a&gt;. However, by doing that you&amp;#8217;ll loose one of the most important benefits of &lt;code&gt;mvnd&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;race_for_system_resources&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#race_for_system_resources&quot;&gt;&lt;/a&gt;Race for system resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most prominent example of this kind of issue is opening sockets using a fixed port in modules built in parallel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Say that your module dependencies are like this again&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;text&quot;&gt;    A
   / \
  B   C    (Lower depends on upper)
   \ /
    D&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and say that both &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; contain some tests and that the tests in both modules start some helper service on a fixed port, e.g. &lt;code&gt;1234&lt;/code&gt;.
The service can be the application under test itself, a database, a message broker, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am sure you see the problem:
the tests either in &lt;code&gt;B&lt;/code&gt; or in &lt;code&gt;C&lt;/code&gt; won&amp;#8217;t be able to start the service,
because the port is already occupied by the service started from the other module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;remedy_3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#remedy_3&quot;&gt;&lt;/a&gt;Remedy&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When it comes to solutions, I suggest you first decide for yourself, whether running tests in parallel is a goal worth pursuing at all.
Maybe it is too much work, maybe the test isolation is hard to guarantee.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I generally do not do it and I barely need to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On my desktop, I prefer building the whole tree &lt;a href=&quot;/2020/10/29/skipping-maven-mojos-properly.html&quot;&gt;as fast as possible without tests&lt;/a&gt;
and then running the individual tests for the area I am working on using &lt;code&gt;-Dtest=MyTest&lt;/code&gt; or &lt;code&gt;-Dit.test=MyIntegrationTest&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On CI servers, I prefer using stock Maven with its default &lt;code&gt;singlethreaded&lt;/code&gt; builder to run all tests properly isolated.
To speed it up, it is often possible to split a large build into groups of modules which can be built and tested on separate worker nodes in parallel.
On those nodes I still use &lt;code&gt;singlethreaded&lt;/code&gt; builder so that the execution is serialized and reproducible.
That&amp;#8217;s quite easy to do in environments like GitHub actions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Anyway if you conclude that (module-wise) parallel tests are a worthwhile goal, here is a couple of thoughts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting helper services lazily (start only if it does not run already) may or may not solve the problem.
It depends on how your tests are written whether the situation morphes into the problem of shared mutable state I have described above.
Closing the resources after the tests may get tricky as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Redesigning your tests to use random ports might be a better strategy.
Using &lt;a href=&quot;https://www.testcontainers.org/features/networking/&quot;&gt;Testcontainers&lt;/a&gt; is a great way to do it for databases and other kinds of services are containerized or containerizable at least.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#160;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it for today.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feel free to ping me on twitter (&lt;a href=&quot;https://twitter.com/ppalaga&quot;&gt;@ppalaga&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/mvndaemon&quot;&gt;@mvndaemon&lt;/a&gt;)
or via &lt;a href=&quot;https://github.com/mvndaemon/mvnd/issues&quot;&gt;GitHub issues&lt;/a&gt; if you have more interesting issues related to parallel builds with &lt;code&gt;mvnd&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stay tuned for the next &lt;code&gt;mvnd&lt;/code&gt; tip!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://twitter.com/mvndaemon&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/url/https/twitter.com/mvndaemon.svg?style=social&amp;label=Follow%20%40mvndaemon&quot; alt=&quot;mvndaemon&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="mvnd" /><summary type="html">mvnd tip: Solving common issues of parallel builds In the previous mvnd tip, we have introduced mvnd's smart builder and explained how it works. Today, I&amp;#8217;d like discuss various issues you may hit when migrating from Maven singlethreaded builder and I&amp;#8217;ll propose some solutions.</summary></entry><entry><title type="html">mvnd tip: Parallel and non-parallel builds</title><link href="https://peter.palaga.org/2021/01/11/mvnd-parallel-builds.html" rel="alternate" type="text/html" title="mvnd tip: Parallel and non-parallel builds" /><published>2021-01-11T00:00:00+00:00</published><updated>2021-01-11T00:00:00+00:00</updated><id>https://peter.palaga.org/2021/01/11/mvnd-parallel-builds</id><content type="html" xml:base="https://peter.palaga.org/2021/01/11/mvnd-parallel-builds.html">&lt;h1&gt;&lt;code&gt;mvnd&lt;/code&gt; tip: Parallel and non-parallel builds&lt;/h1&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;/2021/01/08/mvnd-shortcuts.html&quot;&gt;Another&lt;/a&gt; tip that will serve as a base for the future
&lt;code&gt;&lt;a href=&quot;https://github.com/mvndaemon/mvnd&quot;&gt;mvnd&lt;/a&gt;&lt;/code&gt; documentation. Today about parallel and non-parallel builds.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;parallel_by_default&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#parallel_by_default&quot;&gt;&lt;/a&gt;Parallel by default&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are building a multimodule source tree, whose internal dependencies allow for building some modules in parallel,
&lt;code&gt;mvnd&lt;/code&gt; will, by default, build them in parallel for you. The default number of threads is one or
&lt;code&gt;Runtime.getRuntime().availableProcessors() - 1&lt;/code&gt;, whichever is greater. You can change this value using
Maven&amp;#8217;s standard parameter &lt;code&gt;-T&lt;/code&gt;/&lt;code&gt;--threads&lt;/code&gt;. E.g. to use five threads the command would look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ mvnd package -T5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How many threads should you use? Well, it depends on two factors at least:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;How many CPU cores are available on your machine? It typically does not bring any speedup to use more threads than
the number of threads your machine can run at the same time. Use &lt;code&gt;lscpu&lt;/code&gt; on Linux or its equivalent for your
operating system to figure out how many CPU cores you have available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Which other tasks is your machine running? If you want to work inside your IDE or browser during the build, you
should leave one or two cores out of the set assigned to &lt;code&gt;mvnd&lt;/code&gt;. That&amp;#8217;s actually the assumption behind the default
value chosen by &lt;code&gt;mvnd&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These are just general rules that may or may not hold for your situation. Feel free to experiment with various &lt;code&gt;-T&lt;/code&gt;
values and see which setting works best for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;-T&lt;/code&gt;/&lt;code&gt;--threads&lt;/code&gt; allows for a &quot;processor count multiplier&quot; notation using &lt;code&gt;-T&amp;lt;n&amp;gt;C&lt;/code&gt; where &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; is a (potentially
decimal) number to multiply the number of processors of the current machine. E.g. to use a half of the processors,
you&amp;#8217;d use &lt;code&gt;-T0.5C&lt;/code&gt;, to use twice as many threads as the number of processors, you&amp;#8217;d use &lt;code&gt;-T2C&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can persist your preference in &lt;code&gt;~/.m2/mvnd.properties&lt;/code&gt; as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot;&gt;mvnd.threads = 5
# or alternatively using the multiplier notation
# mvnd.threads = 0.5C&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;smart_builder_by_default&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#smart_builder_by_default&quot;&gt;&lt;/a&gt;&lt;code&gt;smart&lt;/code&gt; builder by default&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maven has the concept of pluggable &lt;code&gt;builder&lt;/code&gt; since version 3.2.1.
It is &lt;a href=&quot;https://maven.apache.org/docs/3.2.1/release-notes#new-builder-interface-mng-5575&quot;&gt;described&lt;/a&gt; as a strategy for
scheduling and building projects. Stock Maven offers two builder implementations: &lt;code&gt;singlethreaded&lt;/code&gt; and &lt;code&gt;multithreaded&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Except for these two, at least one more can be found in the wild: the
&lt;a href=&quot;http://takari.io/book/30-team-maven.html#takari-smart-builder&quot;&gt;Takari Smart Builder&lt;/a&gt;. &lt;code&gt;mvnd&lt;/code&gt;'s &lt;code&gt;smart&lt;/code&gt; builder is
based on this one. It is actually a copy with a few minor modifications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To characterize the Takari Smart Builder, let&amp;#8217;s cite from its &lt;a href=&quot;http://takari.io/book/30-team-maven.html#takari-smart-builder&quot;&gt;documentation&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The primary difference between the standard multi-threaded scheduler in Maven and the Takari smart builder is illustrated below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/images/2021/01-11-mvnd-parallel-builds/smart-builder-scheduler.png&quot; alt=&quot;Standard and Smart Builder Scheduling&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The standard multi-threaded scheduler is using a rather naive and simple approach of using dependency-depth information in the project. It builds everything at a given dependency-depth before continuing to the next level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Takari Smart Builder is using a more advanced approach of dependency-path information. Projects are aggressively built along a dependency-path in topological order as upstream dependencies have been satisfied.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;smart&lt;/code&gt; builder is one of the features that make &lt;code&gt;mvnd&lt;/code&gt; so much faster from the standard Maven. (The other ones are
classloader caching in the Daemon and &lt;code&gt;mvnd&lt;/code&gt; command line client being a &lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM&lt;/a&gt; native executable.)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;mavens_serial_builder_via_1_serial&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mavens_serial_builder_via_1_serial&quot;&gt;&lt;/a&gt;Maven&amp;#8217;s serial builder via &lt;code&gt;-1&lt;/code&gt;/&lt;code&gt;--serial&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can hit various issues when building with &lt;code&gt;smart&lt;/code&gt; builder, such as hidden dependencies between modules,
plugins relying on global mutable state, modules racing for system resources, etc. I am planning to dedicate my next
&lt;code&gt;mvnd&lt;/code&gt; tip to those issues and I&amp;#8217;d also like to sketch some possible solutions there. Before I do that that I can
offer only a very crude workaround if you encounter any issues with &lt;code&gt;smart&lt;/code&gt; builder: fallback to the stock Maven&amp;#8217;s
single-threaded builder by passing &lt;code&gt;-1&lt;/code&gt; or &lt;code&gt;--serial&lt;/code&gt; on the command line:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ mvnd package -1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or you can store your choice permanently in &lt;code&gt;~/.m2/mvnd.properties&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot;&gt;mvnd.serial = true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#160;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s it for today, stay tuned for the next &lt;code&gt;mvnd&lt;/code&gt; tip!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://twitter.com/mvndaemon&quot;&gt;&lt;img src=&quot;https://img.shields.io/twitter/url/https/twitter.com/mvndaemon.svg?style=social&amp;label=Follow%20%40mvndaemon&quot; alt=&quot;mvndaemon&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><category term="mvnd" /><summary type="html">mvnd tip: Parallel and non-parallel builds Another tip that will serve as a base for the future mvnd documentation. Today about parallel and non-parallel builds.</summary></entry></feed>